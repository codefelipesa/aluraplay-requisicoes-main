'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StyleBuilder = function () {
    function StyleBuilder(settings) {
        var unitType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';

        _classCallCheck(this, StyleBuilder);

        this.settings = (typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) === 'object' ? settings : {};
        this.unitType = unitType;
    }

    _createClass(StyleBuilder, [{
        key: 'get',
        value: function get(val) {
            return this.settings[val];
        }
    }, {
        key: 'set',
        value: function set(key, val) {
            return this.settings[key] = val;
        }
    }, {
        key: 'has',
        value: function has(val) {
            return this.settings.hasOwnProperty(val);
        }
    }, {
        key: 'unit',
        value: function unit(val) {
            if (val) {
                this.unitType = val;
                return this;
            }
            return this.unitType;
        }
    }, {
        key: 'display',
        value: function display(val) {
            if (val) {
                this.set('display', val);
                return this;
            }
            return this.has('display') ? 'display:' + this.get('display') + ';' : '';
        }
    }, {
        key: 'position',
        value: function position(val) {
            if (val) {
                this.set('position', val);
                return this;
            }

            return this.has('position') ? 'position:' + this.get('position') + ';' : '';
        }
    }, {
        key: 'height',
        value: function height(val) {
            if (val) {
                this.set('height', val);
                return this;
            }

            return this.has('height') ? 'height:' + this.get('height') + this.unit() + ';' : '';
        }
    }, {
        key: 'width',
        value: function width(val) {
            if (val) {
                this.set('width', val);
                return this;
            }

            return this.has('width') ? 'width:' + this.get('width') + this.unit() + ';' : '';
        }
    }, {
        key: 'zIndex',
        value: function zIndex(val) {
            if (val) {
                this.set('zIndex', val);
                return this;
            }

            return this.has('zIndex') ? 'z-index: ' + this.get('zIndex') + ';' : '';
        }
    }, {
        key: 'left',
        value: function left(val) {
            if (val) {
                this.set('left', val);
                return this;
            }

            return this.has('left') || this.has('x') ? 'left:' + (this.get('left') || this.get('x')) + this.unit() + ';' : '';
        }

        // left alias

    }, {
        key: 'x',
        value: function x(val) {
            return this.left(val);
        }
    }, {
        key: 'top',
        value: function top(val) {
            if (val) {
                this.set('top', val);
                return this;
            }

            return this.has('top') || this.has('y') ? 'top:' + (this.get('top') || this.get('y')) + this.unit() + ';' : '';
        }

        // top alias

    }, {
        key: 'y',
        value: function y(val) {
            return this.top(val);
        }
    }, {
        key: 'rotate',
        value: function rotate(val) {
            if (val) {
                this.set('rotate', val);
                return this;
            }

            return this.has('rotate') ? 'transform:rotate(' + this.get('rotate') + 'deg);' : '';
        }
    }, {
        key: 'textAlign',
        value: function textAlign(val) {
            if (val) {
                this.set('textAlign', val);
                return this;
            }
            return this.has('textAlign') ? 'text-align:' + this.get('textAlign') + ';' : '';
        }
    }, {
        key: 'textTransform',
        value: function textTransform(val) {
            if (val) {
                this.set('textTransform', val);
                return this;
            }
            return this.has('textTransform') ? 'text-transform:' + this.get('textTransform') + ';' : '';
        }
    }, {
        key: 'fontWeight',
        value: function fontWeight(val) {
            if (val) {
                this.set('fontWeight', val);
                return this;
            }
            return this.has('fontWeight') ? 'font-weight:' + this.get('fontWeight') + ';' : '';
        }
    }, {
        key: 'fontStyle',
        value: function fontStyle(val) {
            if (val) {
                this.set('fontStyle', val);
                return this;
            }
            return this.has('fontStyle') ? 'font-style:' + this.get('fontStyle') + ';' : '';
        }
    }, {
        key: 'fontSize',
        value: function fontSize(val) {
            if (val) {
                this.set('fontSize', val);
                return this;
            }
            return this.has('fontSize') ? 'font-size:' + this.get('fontSize') + this.unit() + ';' : '';
        }
    }, {
        key: 'fontFamily',
        value: function fontFamily(val) {
            if (val) {
                this.set('fontFamily', val);
                return this;
            }
            return this.has('fontFamily') ? 'font-family:' + this.get('fontFamily') + ';' : '';
        }
    }, {
        key: 'color',
        value: function color(val) {
            if (val) {
                this.set('color', val);
                return this;
            }
            return this.has('color') ? 'color:' + this.get('color') + ';' : '';
        }
    }, {
        key: 'backgroundColor',
        value: function backgroundColor(val) {
            if (val) {
                this.set('backgroundColor', val);
                return this;
            }

            return this.has('backgroundColor') ? 'background-color:' + this.get('backgroundColor') + ';' : '';
        }
    }, {
        key: 'radius',
        value: function radius(val) {
            if (val) {
                this.set('radius', val);
                return this;
            }
            return this.has('radius') ? 'border-radius: ' + this.get('radius') + this.unit() + ';' : '';
        }
    }, {
        key: 'objectFit',
        value: function objectFit(val) {
            if (val) {
                this.set('objectFit', val);
                return this;
            }

            return this.has('objectFit') ? 'object-fit:' + this.get('objectFit') + ';' : '';
        }
    }, {
        key: 'render',
        value: function render() {
            return '' + this.display() + this.position() + this.height() + this.width() + this.backgroundColor() + this.left() + this.top() + this.rotate() + this.zIndex() + this.textAlign() + this.textTransform() + this.fontWeight() + this.fontStyle() + this.fontSize() + this.fontFamily() + this.color() + this.radius() + this.objectFit();
        }
    }]);

    return StyleBuilder;
}();

exports.default = StyleBuilder;